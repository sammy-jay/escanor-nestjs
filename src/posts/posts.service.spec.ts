// Generated by CodiumAI

import { PostNotFoundException } from "./exceptions/post-not-found.exception";
import { PrismaService } from '../prisma/prisma.service';
import { PostsService } from "./posts.service";
import { Test } from "@nestjs/testing";

describe('PostsService_class', () => {
  let postsService: PostsService;
  
  beforeEach(async () => {
    const moduleRef = await Test.createTestingModule({
      providers: [PostsService, PrismaService],
    }).compile();
    
    postsService = moduleRef.get<PostsService>(PostsService);
  });
  
  // Tests that getAllPosts returns an array of posts
  it('test_get_all_posts_returns_array', async () => {
    const posts = await postsService.getAllPosts();
    expect(Array.isArray(posts)).toBe(true);
  });

  // Tests that getPostById returns a post with the given id
  it('test_get_post_by_id_returns_post', async () => {
    const post = await postsService.createPost({
      title: 'Test Post',
      content: 'Test Content',
      userId: 1,
    });
    const foundPost = await postsService.getPostById(post.id);
    expect(foundPost).toEqual(post);
  });

  // Tests that createPost creates a new post and returns it
  it('test_create_post_creates_new_post', async () => {
    const newPost = {
      title: 'Test Post',
      content: 'Test Content',
      userId: 1,
    };
    const createdPost = await postsService.createPost(newPost);
    expect(createdPost.title).toEqual(newPost.title);
    expect(createdPost.content).toEqual(newPost.content);
    expect(createdPost.userId).toEqual(newPost.userId);
  });

  // Tests that replacePost updates a post with the given id and returns it
  it('test_replace_post_updates_post', async () => {
    const newPost = {
      title: 'Test Post',
      content: 'Test Content',
      userId: 1,
    };
    const createdPost = await postsService.createPost(newPost);
    const updatedPost = await postsService.replacePost(createdPost.id, {
      id: createdPost.id,
      title: 'Updated Test Post',
      content: 'Updated Test Content',
      userId: createdPost.userId,
    });
    expect(updatedPost.title).toEqual('Updated Test Post');
    expect(updatedPost.content).toEqual('Updated Test Content');
    expect(updatedPost.userId).toEqual(1);
  });

  // Tests that deletePost deletes a post with the given id
  it('test_delete_post_deletes_post', async () => {
    const newPost = {
      title: 'Test Post',
      content: 'Test Content',
      userId: 1,
    };
    const createdPost = await postsService.createPost(newPost);
    await postsService.deletePost(createdPost.id);
    let postExists = true;
    try {
      await postsService.getPostById(createdPost.id);
    } catch (e) {
      postExists = false;
    }
    expect(postExists).toBe(false);
  });

  // Tests that getPostById throws PostNotFoundException if post with given id does not exist
  it('test_get_post_by_id_throws_exception', async () => {
    let error;
    try {
      await postsService.getPostById(999);
    } catch (e) {
      error = e;
    }
    expect(error).toBeInstanceOf(PostNotFoundException);
  });
});
